git config --global init.default.Branch main
# set local default git branch to main

basic workflow - clone repo > create or change file > add to stage > commit to branch (local repo?) with message > push to remote repo

# see git-explanation about cloning from github

touch - create an empty file on linux bash
echo nul > filename.txt - create an empty file on windows cmd
New-Item <path>\<empty-filename> - create and empty file on windows powershell
# create a file or change existing file

git status
# get the current staging of files

git add <unstaged-file>
# add file to staging are in git. staging areas are the 'waiting room' for the changes until they are committed. unstaged files are in red.

git status
# verify the unstaged-file has been staged. if it is green, then it has been staged for a commit.

git commit -m "Add <staged-file>"
# commit (upload) the staged file to the local repository. -m switch allows you to add a message with the commit.

git status
# verify commit has gone through. the working tree should be clean, and the branch should be ahead of origin/main by 1 commit.

git log
# historical entry for changes to the git repository.

code .
# open vscode in the present working directory. edit a file and save it. vs code will have a letter and color associated with the state of the file in the git workflow. yellow M is modified.

git add README.md
# add file to staging. other files are not added.

--editing another file in present directory.

git add .
# add all files in present directory to the staging area.

git commit -m "Edit README.md and hello_world.txt"
# commit the two files to local repository.

git status
# should output "nothing to commit".

git log
# view historical entries to the repository.

git push
# only if you are not working with another branch. < git push origin main >. origin is the name of the remote connection for the remote repository (by default). main is the local default git branch.

Atomic commit - a commit includes changes related to only one feature or task of a program. This helps with reverting specific changes (leaving other changes alone), and with writing better commit messages.

git config --global core.editor "code --wait"
# change git commit editor 

